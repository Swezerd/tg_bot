const TelegramBot = require('node-telegram-bot-api');

// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
const TOKEN = process.env.BOT_TOKEN || "8136440725:AAGXTzGcuASyTFB5HfYj3QZQ5c9exoALGkQ";
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || "-1008136440725";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

// ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
const userState = {};

// ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userState[chatId] = { step: 'FIO', data: {} };
  bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ =====
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!userState[chatId] || text.startsWith('/start')) return;

  const state = userState[chatId];

  switch (state.step) {
    case 'FIO':
      state.data.fio = text;
      state.step = 'DATE';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22.10.2025):');
      break;

    case 'DATE':
      state.data.date = text;
      state.step = 'MACHINE';
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–Ω–∫–∞:', {
        reply_markup: {
          keyboard: [['–ß–ü–£', '–¢–æ–∫–∞—Ä–Ω—ã–π', '–§—Ä–µ–∑–µ—Ä–Ω—ã–π']],
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
      break;

    case 'MACHINE':
      state.data.machine = text;
      state.step = 'Q1';
      bot.sendMessage(chatId, '–°—Ç–∞–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç?', {
        reply_markup: {
          keyboard: [['–î–ê', '–ù–ï–¢']],
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
      break;

    case 'Q1':
      state.data.q1 = text;
      state.step = 'Q2';
      bot.sendMessage(chatId, '–°—Ç–∞–Ω–æ–∫ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω?', {
        reply_markup: {
          keyboard: [['–î–ê', '–ù–ï–¢']],
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
      break;

    case 'Q2':
      state.data.q2 = text;
      state.step = 'Q3';
      bot.sendMessage(chatId, '–°—Ç–∞–Ω–æ–∫ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏?', {
        reply_markup: {
          keyboard: [['–î–ê', '–ù–ï–¢']],
          one_time_keyboard: true,
          resize_keyboard: true
        }
      });
      break;

    case 'Q3':
      state.data.q3 = text;
      state.step = 'A1';
      bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–±–µ–≥ —Å—Ç–∞–Ω–∫–∞:');
      break;

    case 'A1':
      state.data.a1 = text;
      state.step = 'A2';
      bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç?');
      break;

    case 'A2':
      state.data.a2 = text;
      state.step = 'A3';
      bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ —Å–º —Ä–∞–±–æ—á–µ–µ –ø–æ–ª–µ?');
      break;

    case 'A3':
      state.data.a3 = text;

      const d = state.data;
      const report = `üìã –û—Ç—á—ë—Ç –ø–æ —Å—Ç–∞–Ω–∫—É\n\n` +
                     `üë§ –§–ò–û: ${d.fio}\n` +
                     `üìÖ –î–∞—Ç–∞: ${d.date}\n` +
                     `‚öôÔ∏è –°—Ç–∞–Ω–æ–∫: ${d.machine}\n\n` +
                     `1Ô∏è‚É£ –†–∞–±–æ—Ç–∞–µ—Ç: ${d.q1}\n` +
                     `2Ô∏è‚É£ –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω: ${d.q2}\n` +
                     `3Ô∏è‚É£ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: ${d.q3}\n\n` +
                     `–ü—Ä–æ–±–µ–≥: ${d.a1}\n` +
                     `–ö–Ω–æ–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${d.a2}\n` +
                     `–†–∞–±–æ—á–µ–µ –ø–æ–ª–µ: ${d.a3} —Å–º`;

      bot.sendMessage(ADMIN_CHAT_ID, report);
      bot.sendMessage(chatId, '‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ!', {
        reply_markup: { remove_keyboard: true }
      });

      delete userState[chatId];
      break;
  }
});
